name: CI / CD webapp
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
    
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          touch .env
          echo MONGODB_USER=${{secrets.MONGODB_USER}} >> .env
          echo MONGODB_PASSWORD=${{secrets.MONGODB_PASSWORD}} >> .env
          echo MONGODB_HOST=${{secrets.MONGODB_HOST}} >> .env
          echo MONGODB_PORT=${{secrets.MONGODB_PORT}} >> .env
          echo MONGODB_AUTHSOURCE=${{secrets.MONGODB_AUTHSOURCE}} >> .env
          echo MONGODB_NAME=${{secrets.MONGODB_NAME}} >> .env
          echo WEBAPP_FLASK_PORT=${{ secrets.WEBAPP_FLASK_PORT }} >> .env
          echo WEBAPP_FLASK_APP=${{ secrets.WEBAPP_FLASK_APP }} >> .env
          echo WEBAPP_FLASK_ENV=${{ secrets.WEBAPP_FLASK_ENV }} >> .env
          echo WEBAPP_FLASK_SECRET_KEY=${{ secrets.WEBAPP_FLASK_SECRET_KEY }} >> .env
          
          python -m pip install --upgrade pip
          pip install --user pipenv
          pipenv --python ${{ matrix.python-version }}
          pipenv install pytest
          pipenv install         
      - name: Turn on 'editable' mode
        run: |
          pipenv install -e .
      - name: Test with pytest
        run: |
          pipenv run python -m pytest

  push_to_registry:
    needs: [build]
    if: github.ref == 'refs/heads/main'
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user pipenv
          pipenv install pytest
          pipenv install
      - name: Build package
        run: |
          pipenv install build
          pipenv run python -m build .
      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: https://pypi.org/legacy/

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: doodyshark/se-project-5

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          build-args: |
            MONGODB_USER=${{secrets.MONGODB_USER}}
            MONGODB_PASSWORD=${{secrets.MONGODB_PASSWORD}}
            MONGODB_HOST=${{secrets.MONGODB_HOST}}
            MONGODB_PORT=${{secrets.MONGODB_PORT}}
            MONGODB_AUTHSOURCE=${{secrets.MONGODB_AUTHSOURCE}}
            MONGODB_NAME=${{secrets.MONGODB_NAME}}
            WEBAPP_FLASK_PORT=${{ secrets.WEBAPP_FLASK_PORT }}
            WEBAPP_FLASK_APP=${{ secrets.WEBAPP_FLASK_APP }}
            WEBAPP_FLASK_ENV=${{ secrets.WEBAPP_FLASK_ENV }}
            WEBAPP_FLASK_SECRET_KEY=${{ secrets.WEBAPP_FLASK_SECRET_KEY }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: DigitalOcean App Platform deployment
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: fizzbuzz-draw
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}